// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/matrix-blasreference.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

namespace blas
{

//
// vector_copy
//

inline
void
vector_copy(int N, double const* x, int incx, double* y, int incy)
{
   if (incx == 1 && incy == 1)
   {
      std::memcpy(y, x, N*sizeof(double));
   }
   else
   {
      for (int i = 0; i < N; ++i)
      {
         *y = *x;
         x += incx;
         y += incy;
      }
   }
}

inline
void
vector_copy(int N, std::complex<double> const* x, int incx, std::complex<double>* y, int incy)
{
   if (incx == 1 && incy == 1)
   {
      std::memcpy(y, x, N*sizeof(std::complex<double>));
   }
   for (int i = 0; i < N; ++i)
   {
      *y = *x;
      x += incx;
      y += incy;
   }
}

//
// vector_copy_scaled
//

void
vector_copy_scaled(int N, double alpha, double const* x, int incx, double* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y = alpha * (*x);
      x += incx;
      y += incy;
   }
}

void
vector_copy_scaled(int N, std::complex<double> alpha,
                   std::complex<double> const* x, int incx,
                   std::complex<double>* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y = alpha * (*x);
      x += incx;
      y += incy;
   }
}

//
// vector_add
//

void
vector_add(int N, double const* x, int incx, double* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y += (*x);
      x += incx;
      y += incy;
   }
}

void
vector_add(int N, std::complex<double> const* x, int incx,
           std::complex<double>* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y += (*x);
      x += incx;
      y += incy;
   }
}

//
// vector_add_scaled
//

void
vector_add_scaled(int N, double alpha, double const* x, int incx, double* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y += alpha * (*x);
      x += incx;
      y += incy;
   }
}

void
vector_add_scaled(int N, std::complex<double> alpha,
                  std::complex<double> const* x, int incx,
                  std::complex<double>* y, int incy)
{
   for (int i = 0; i < N; ++i)
   {
      *y += alpha * (*x);
      x += incx;
      y += incy;
   }
}

void
vector_sum(int N, double const* x, int incx, double& r)
{
   double rr = 0.0;
   for (int i = 0; i < N; ++i)
   {
      rr += *x;
      x += incx;
   }
   r = rr;
}

void
vector_sum(int N, std::complex<double> const* x, int incx, std::complex<double>& r)
{
   std::complex<double> rr = 0.0;
   for (int i = 0; i < N; ++i)
   {
      rr += *x;
      x += incx;
   }
   r = rr;
}

//
// matrix_copy
//

inline
void matrix_copy(char Atrans, int M, int N, double const* A, int lda, double* B, int ldb)
{
   if (Atrans == 'N')
   {
      if (lda == N && ldb == N)
      {
         std::memcpy(B, A, M*N*sizeof(double));
      }
      else
      {
         for (int c = 0; c < N; ++c)
         {
            std::memcpy(B, A, M*sizeof(double));
            A += lda;
            B += ldb;
         }
      }
   }
   else
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = A[r*lda + c];
         }
         B += ldb;
      }
   }
}

inline
void
matrix_copy(char Atrans, int M, int N,
            std::complex<double> const* A, int lda,
            std::complex<double>* B, int ldb)
{
   if (Atrans == 'N')
   {
      // normal
      if (lda == N && ldb == N)
      {
         std::memcpy(B, A, M*N*sizeof(double));
      }
      else
      {
         for (int c = 0; c < N; ++c)
         {
            std::memcpy(B, A, M*sizeof(double));
            A += lda;
            B += ldb;
         }
      }
   }
   else if (Atrans = 'R')
   {
      // conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = conj(A[r]);
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'T')
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = A[r*lda + c];
         }
         B += ldb;
      }
   }
   else if (Atrans = 'C')
   {
      // hermitian conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = conj(A[r*lda + c]);
         }
         B += ldb;
      }
   }
}

inline
void
matrix_copy_scaled(char Atrans, int M, int N, double alpha, double const* A, int lda, double* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = alpha * A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = A[r*lda + c];
         }
         B += ldb;
      }
   }
}

inline
void
matrix_copy_scaled(char Atrans, int M, int N, std::complex<double> alpha,
                   std::complex<double> const* A, int lda,
                   std::complex<double>* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = alpha * A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'R')
   {
      // conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = alpha * conj(A[r]);
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'T')
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = alpha * A[r*lda + c];
         }
         B += ldb;
      }
   }
   else if (Atrans = 'C')
   {
      // hermitian conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] = alpha * conj(A[r*lda + c]);
         }
         B += ldb;
      }
   }
}

//
// matrix_add
//

inline
void
matrix_add(char Atrans, int M, int N, double const* A, int lda, double* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += A[r*lda + c];
         }
         B += ldb;
      }
   }
}

inline
void
matrix_add(char Atrans, int M, int N,
           std::complex<double> const* A, int lda,
           std::complex<double>* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'R')
   {
      // conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += conj(A[r]);
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'T')
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += A[r*lda + c];
         }
         B += ldb;
      }
   }
   else if (Atrans = 'C')
   {
      // hermitian conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += conj(A[r*lda + c]);
         }
         B += ldb;
      }
   }
}

inline
void
matrix_add_scaled(char Atrans, int M, int N, double alpha, double const* A, int lda, double* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += alpha * A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += A[r*lda + c];
         }
         B += ldb;
      }
   }
}

inline
void
matrix_add_scaled(char Atrans, int M, int N, std::complex<double> alpha,
                  std::complex<double> const* A, int lda,
                  std::complex<double>* B, int ldb)
{
   if (Atrans == 'N')
   {
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += alpha * A[r];
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'R')
   {
      // conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += alpha * conj(A[r]);
         }
         A += lda;
         B += ldb;
      }
   }
   else if (Atrans = 'T')
   {
      // transpose
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += alpha * A[r*lda + c];
         }
         B += ldb;
      }
   }
   else if (Atrans = 'C')
   {
      // hermitian conjugate
      for (int c = 0; c < N; ++c)
      {
         for (int r = 0; r < M; ++r)
         {
            B[r] += alpha * conj(A[r*lda + c]);
         }
         B += ldb;
      }
   }
}


} // namespace blas
