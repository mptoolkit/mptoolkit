// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/matrix-eigen.h
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

//
// A simple dense matrix class designed for scalar types.
//

namespace blas
{

namespace detail
{

void DiagonalizeSymmetric(int Size, double* Data, int LeadingDim, double* Eigen);

void DiagonalizeHermitian(int Size, std::complex<double>* Data, int LeadingDim, double* Eigen);

} // namespace detail

inline
Vector<double>
DiagonalizeSymmetric(Matrix<double>& M)
{
   CHECK_EQUAL(M.rows(), M.cols());
   Vector<double> Result(M.rows());
   DiagonalizeSymmetric(M.rows(), M.storage(), M.leading_dimension(), Result.storage());
   return Result;
}

template <typename U>
inline
void
DiagonalizeSymmetric(Matrix<double>& M, BlasVector<double, U, cpu_tag>& v)
{
   if (v.stride() == 1)
   {
      DiagonalizeSymmetric(M.rows(), M.storage(), M.leading_dimension(), v.storage());
   }
   else
   {
      v = DiagonalizeSymmetric(M);
   }
}

template <typename U>
inline
void
DiagonalizeSymmetric(Matrix<double>& M, BlasVector<double, U, cpu_tag>&& v)
{
   if (v.stride() == 1)
   {
      DiagonalizeSymmetric(M.rows(), M.storage(), M.leading_dimension(), v.storage());
   }
   else
   {
      static_cast<U&&>(v.as_derived()) = DiagonalizeSymmetric(M);
   }
}

//
// complex
//

inline
Vector<double>
DiagonalizeSymmetric(Matrix<std::complex<double>>& M)
{
   CHECK_EQUAL(M.rows(), M.cols());
   Vector<double> Result(M.rows());
   DiagonalizeHermitian(M.rows(), M.storage(), M.leading_dimension(), Result.storage());
   return Result;
}

template <typename U>
inline
void
DiagonalizeSymmetric(Matrix<std::complex<double>>& M, BlasVector<double, U, cpu_tag>& v)
{
   if (v.stride() == 1)
   {
      DiagonalizeHermitian(M.rows(), M.storage(), M.leading_dimension(), v.storage());
   }
   else
   {
      v = DiagonalizeHermitian(M);
   }
}

template <typename U>
inline
void
DiagonalizeSymmetric(Matrix<std::complex<double>>& M, BlasVector<double, U, cpu_tag>&& v)
{
   if (v.stride() == 1)
   {
      DiagonalizeHermitian(M.rows(), M.storage(), M.leading_dimension(), v.storage());
   }
   else
   {
      static_cast<U&&>(v.as_derived()) = DiagonalizeHermitian(M);
   }
}

} // namespace blas

#endif
