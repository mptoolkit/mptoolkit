// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/diagonalmatrix.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

namespace blas
{

template <typename T, typename Tag>
template <typename U>
DiagonalMatrix<T, Tag>::DiagonalMatrix(std::initializer_list<U> m, arena Arena_)
   : DiagonalMatrix(m.size(), m.size(), Arena_)
{
   vector_copy_from_stl(m.begin(), m.end(), Buf.ptr(), 1);
}

template <typename T, typename Tag>
template <typename U>
DiagonalMatrix<T, Tag>::DiagonalMatrix(DiagonalMatrixRef<T, U, Tag> const& E, arena Arena_)
   : DiagonalMatrix(E.rows(), E.cols(), Arena_)
{
   assign(*this, E.as_derived());
}

template <typename T, typename Tag>
DiagonalMatrix<T, Tag>::DiagonalMatrix(int R, int C, arena Arena_)
   : Size(R),  Buf(buffer_type::allocate(R, Arena_))
{
   CHECK_EQUAL(R,C)("Diagonal matrix must be square");
}

template <typename T>
std::ostream&
operator<<(std::ostream& out, DiagonalMatrix<T, cpu_tag> const& x)
{
   out << "diagonal[" << x.rows() << ", " << x.cols() << "]\n";
   bool first = true;
   for (auto const& a : x.diagonal())
   {
      if (!first)
         out << '\n';
      write_format(out, a);
      first = false;
   }
   return out;
}

template <typename T, typename Tag>
std::ostream&
operator<<(std::ostream& out, DiagonalMatrix<T, Tag> const& x)
{
   out << x.diagonal();
   return out;
}

template <int Format, typename T>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, DiagonalMatrix<T, cpu_tag> const& M)
{
   out << M.diagonal();
   return out;
}

template <int Format, typename T, typename Tag>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, DiagonalMatrix<T, Tag> const& M)
{
   Vector<T, cpu_tag> v = get_wait(M.diagonal());
   out << v;
   return out;
}

} // namespace blas

namespace PStream
{

template <typename T>
template <int Format>
blas::DiagonalMatrix<T,blas::cpu_tag>
stream_extract<blas::DiagonalMatrix<T,blas::cpu_tag>>::operator()(PStream::ipstreambuf<Format>& in) const
{ 
   typedef typename PStream::opstreambuf<Format>::size_type st;
   st Size;
   in >> Size;
   blas::DiagonalMatrix<T,blas::cpu_tag> Result(Size);
   for (auto&& x : Result.diagonal())
   {
      in >> x;
   }
   return Result;
}

} // namespace PStream
