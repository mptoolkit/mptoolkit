// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/matrix.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

#include "sparsematrix.h"
#include "vector.h"

namespace blas
{

template <typename T, typename Tag>
template <typename U>
Matrix<T, Tag>::Matrix(std::initializer_list<std::initializer_list<U>> m, arena Arena_)
   : Matrix(m.size(), m.size() == 0 ? 0 : m.begin()->size(), Arena_)
{
   int r = 0;
   for (auto x : m)
   {
      assert(x.size() == Cols);
      vector_uninitialized_copy_from_stl(x.begin(), x.end(), Buf.ptr(r), LeadingDimension);
      ++r;
   }
}

template <typename T, typename Tag>
Matrix<T, Tag>::Matrix(int R, int C, arena Arena_)
   : Rows(R), Cols(C), LeadingDimension(Tag::template select_leading_dimension<T>(R)),
     Buf(buffer_type::allocate(Tag::template select_leading_dimension<T>(R)*C, Arena_))
{
   for (int c = 0; c < C; ++c)
   {
      Tag::uninitialized_default_construct_n(Buf.ptr() + c*LeadingDimension, R);
   }
}

template <typename T, typename Tag>
Matrix<T, Tag>::Matrix(int R, int C, T const& Fill, arena Arena_)
   : Rows(R), Cols(C), LeadingDimension(Tag::template select_leading_dimension<T>(R)),
     Buf(buffer_type::allocate(LeadingDimension*Cols, Arena_))
{
   for (int c = 0; c < C; ++c)
   {
      Tag::uninitialized_fill_n(Buf.ptr() + c*LeadingDimension, R, Fill);
   }
}

template <typename T, typename Tag>
Matrix<T, Tag>::Matrix(SparseMatrix<value_type> const& Other, arena Arena_)
   : Matrix(Other.rows(), Other.cols(), T{}, Arena_)
{
   for (auto const& r : Other)
   {
      for (auto const& c : r)
      {
	 Buf[c.col()*LeadingDimension+r.row()] = c.value;
      }
   }
}


template <typename T, typename Tag>
Matrix<T, Tag>::~Matrix() noexcept
{
   for (int c = 0; c < Cols; ++c)
   {
      Tag::destroy_n(Buf.ptr() + c*LeadingDimension, Rows);
   }
}

template <typename T, typename U>
std::ostream&
operator<<(std::ostream& out, NormalMatrix<T, U, cpu_tag> const& x)
{
   out << '[' << x.rows() << ", " << x.cols() << "]\n";
   for (int r = 0; r < x.rows(); ++r)
   {
      bool first = true;
      for (int c = 0; c < x.cols(); ++c)
      {
         if (!first)
            out << " ";
         write_format(out, x.as_derived()(r,c));
         first = false;
      }
      out << '\n';
   }
   return out;
}

template <int Format, typename T>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, Matrix<T, cpu_tag> const& M)
{
   typedef typename PStream::opstreambuf<Format>::size_type st;
   st Rows = M.rows(), Cols = M.cols();
   out << MatrixFormats::DenseRowMajor;
   out << Rows << Cols;
   for (unsigned i = 0; i < Rows; ++i)
   {
      for (unsigned j = 0; j < Cols; ++j)
      {
	 out << M(i,j);
      }
   }
   return out;
}

template <int Format, typename T, typename Tag>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, Matrix<T, Tag> const& M)
{
   out << get_wait(M);
   return out;
}

} // namespace blas

namespace PStream
{

template <typename T, typename Tag>
template <int Format>
blas::Matrix<T,Tag>
stream_extract<blas::Matrix<T, Tag>>::operator()(PStream::ipstreambuf<Format>& in) const
{
   blas::Matrix<T,blas::cpu_tag> M = stream_extract<blas::Matrix<T,blas::cpu_tag>>()(in);
   blas::Matrix<T,Tag> Result(M.rows(), M.cols());
   set_wait(Result, std::move(M));
   return Result;
}

template <typename T>
template <int Format>
blas::Matrix<T,blas::cpu_tag>
stream_extract<blas::Matrix<T,blas::cpu_tag>>::operator()(PStream::ipstreambuf<Format>& in) const
{
   typedef typename PStream::opstreambuf<Format>::size_type st;
   st Rows, Cols;
   blas::MatrixFormats::type t;
   in >> t;
   if (t != blas::MatrixFormats::DenseRowMajor)
   {
      PANIC("Unsupported dense matrix format");
   }
   in >> Rows >> Cols;
   blas::Matrix<T, blas::cpu_tag> Result(Rows, Cols);
   for (unsigned i = 0; i < Rows; ++i)
   {
      for (unsigned j = 0; j < Cols; ++j)
      {
	 in >> Result(i,j);
      }
   }
   return Result;
}

} // namespace PStream
