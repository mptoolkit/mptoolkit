// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/matrixref.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

#include "matrix_view.h"

namespace blas
{

template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrix<ValueType, DerivedType, Tag>::operator()(Range R, Range C)
{
   return matrix_range_view<ValueType, Tag>(R.size(), C.size(), this->leading_dimension(),
                                            this->storage() + C.first()*this->leading_dimension() + R.first());
}

template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrix<ValueType, DerivedType, Tag>::operator()(Range R, all_t)
{
   return matrix_range_view<ValueType, Tag>(R.size(), this->cols(), this->leading_dimension(),
                                            this->storage() + R.first());
}

template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrix<ValueType, DerivedType, Tag>::operator()(all_t, Range C)
{
   return matrix_range_view<ValueType, Tag>(this->rows(), C.size(), this->leading_dimension(),
                                            this->storage() + C.first()*this->leading_dimension());
}


template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrixProxy<ValueType, DerivedType, Tag>::operator()(Range R, Range C) &&
{
   return matrix_range_view<ValueType, Tag>(R.size(), C.size(), this->leading_dimension(),
                                            this->storage() + C.first()*this->leading_dimension() + R.first());
}

template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrixProxy<ValueType, DerivedType, Tag>::operator()(Range R, all_t) &&
{
   return matrix_range_view<ValueType, Tag>(R.size(), this->cols(), this->leading_dimension(),
                                            this->storage() + R.first());
}

template <typename ValueType, typename DerivedType, typename Tag>
matrix_range_view<ValueType, Tag>
NormalMatrixProxy<ValueType, DerivedType, Tag>::operator()(all_t, Range C) &&
{
   return matrix_range_view<ValueType, Tag>(this->rows(), C.size(), this->leading_dimension(),
                                            this->storage() + C.first()*this->leading_dimension());
}

} // namespace blas
