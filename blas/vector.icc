// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/vector.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

namespace blas
{

template <typename T, typename Tag>
template <typename U>
Vector<T, Tag>::Vector(std::initializer_list<U> m, arena Arena_)
   : Vector(m.size(), Arena_)
{
   vector_copy_from_stl(m.begin(), m.end(), Buf.ptr(), this->stride());
}

template <typename T, typename Tag>
template <typename U>
Vector<T, Tag>::Vector(VectorRef<T, U, Tag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   assign(*this, E.as_derived());
}

template <typename T, typename Tag>
Vector<T, Tag>::Vector(int Size_, arena Arena_)
   : Size(Size_), Buf(buffer_type::allocate(Size_, Arena_))
{
}

template <typename T, typename Tag>
template <typename U, typename OtherTag>
Vector<T, Tag>::Vector(VectorRef<T, U, OtherTag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   set_wait(*this, E.as_derived());
}

//
// cpu_tag specialization
//

template <typename T>
template <typename U>
Vector<T, cpu_tag>::Vector(std::initializer_list<U> m, arena Arena_)
   : Vector(m.size(), Arena_)
{
   vector_copy_from_stl(m.begin(), m.end(), Data, this->stride());
}

template <typename T>
template <typename U>
Vector<T, cpu_tag>::Vector(VectorRef<T, U, cpu_tag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   assign(*this, E.as_derived());
}

template <typename T>
Vector<T, cpu_tag>::Vector(int Size_, arena Arena_)
   : Arena(Arena_), Size(Size_), Data(Arena.allocate_type<T>(Size))
{
}

} // namespace blas
