// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/vector.icc
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

namespace blas
{

template <typename T, typename Tag>
template <typename U>
inline
Vector<T, Tag>::Vector(std::initializer_list<U> m, arena Arena_)
   : Vector(m.size(), Arena_)
{
   vector_copy_from_stl(m.begin(), m.end(), Buf.ptr(), this->stride());
}

template <typename T, typename Tag>
template <typename U>
inline
Vector<T, Tag>::Vector(VectorRef<T, U, Tag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   assign(*this, E.as_derived());
}

template <typename T, typename Tag>
inline
Vector<T, Tag>::Vector(int Size_, arena Arena_)
   : Size(Size_), Buf(buffer_type::allocate(Size_, Arena_))
{
}

template <typename T, typename Tag>
inline
Vector<T, Tag>::Vector(int Size_, T const& Fill, arena Arena_)
   : Size(Size_), Buf(buffer_type::allocate(Size_, Arena_))
{
   fill(*this, Fill);
}

template <typename T, typename Tag>
template <typename U, typename OtherTag>
inline
Vector<T, Tag>::Vector(VectorRef<T, U, OtherTag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   set_wait(*this, E.as_derived());
}

//
// cpu_tag specialization
//

template <typename T>
template <typename U>
inline
Vector<T, cpu_tag>::Vector(std::initializer_list<U> m, arena Arena_)
   : Vector(m.size(), Arena_)
{
   vector_copy_from_stl(m.begin(), m.end(), Data, this->stride());
}

template <typename T>
template <typename U>
inline
Vector<T, cpu_tag>::Vector(VectorRef<T, U, cpu_tag> const& E, arena Arena_)
   : Vector(E.size(), Arena_)
{
   assign(*this, E.as_derived());
}

template <typename T>
inline
Vector<T, cpu_tag>::Vector(int Size_, arena Arena_)
   : Arena(Arena_), Size(Size_), Data(Arena.allocate_type<T>(Size))
{
}

template <typename T>
inline
Vector<T, cpu_tag>::Vector(int Size_, T const& Fill, arena Arena_)
   : Arena(Arena_), Size(Size_), Data(Arena.allocate_type<T>(Size))
{
   fill(*this, Fill);
}

template <typename T, int Format>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, Vector<T, cpu_tag> const& x)
{
   typedef typename PStream::opstreambuf<Format>::size_type st;
   st s = x.size();
   out << 'm';
   out << s;
   for (auto const& i : x)
   {
      out << i;
   }
   return out;
}

template <typename T, typename Tag, int Format>
PStream::opstreambuf<Format>&
operator<<(PStream::opstreambuf<Format>& out, Vector<T, Tag> const& x)
{
   Vector<T, cpu_tag> y = get_wait(x);
   out << y;
   return out;
}

template <typename T, int Format>
PStream::ipstreambuf<Format>&
operator>>(PStream::ipstreambuf<Format>& in, Vector<T, cpu_tag>& x)
{
   // for compatibility with previous version of the LinearAlgebra library
   char c = in.template read<char>();
   if (c != 'm')
   {
      PANIC("unexpected vector format");
   }
   using st = typename PStream::ipstreambuf<Format>::size_type;
   st s = in.template read<st>();
   x = Vector<T,cpu_tag>(s);
   for (auto const& i : x)
   {
      i = in.template read<T>();
   }
   return in;
}

template <typename T, typename Tag, int Format>
PStream::ipstreambuf<Format>&
operator>>(PStream::ipstreambuf<Format>& in, Vector<T, Tag>& x)
{
   auto y = in.template read<Vector<T, cpu_tag>>();
   x = Vector<T, Tag>(y.size());
   set_wait(x, y);
   return in;
}

} // namespace blas
