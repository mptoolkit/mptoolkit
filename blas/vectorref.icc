// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// blas/vectorref.h
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

#include "range.h"
#include "vector_view.h"

namespace blas
{

template <typename ValueType, typename DerivedType, typename Tag>
vector_view<ValueType, Tag>
BlasVector<ValueType, DerivedType, Tag>::operator[](Range r) &
{
   return vector_view<ValueType, Tag>(r.size(), this->stride(), this->storage()+r.first()*this->stride());
}

template <typename ValueType, typename DerivedType, typename Tag>
const_vector_view<ValueType, Tag>
BlasVector<ValueType, DerivedType, Tag>::operator[](Range r) const&
{
   return const_vector_view<ValueType, Tag>(r.size(), this->stride(), this->storage()+r.first()*this->stride());
}

template <typename ValueType, typename DerivedType, typename Tag>
vector_view<ValueType, Tag>
BlasVectorProxy<ValueType, DerivedType, Tag>::operator[](Range r) &&
{
   return vector_view<ValueType, Tag>(r.size(), this->stride(), this->storage()+r.first()*this->stride());
}

template <typename ValueType, typename DerivedType, typename Tag>
const_vector_view<ValueType, Tag>
BlasVectorProxy<ValueType, DerivedType, Tag>::operator[](Range r) const&
{
   return const_vector_view<ValueType, Tag>(r.size(), this->stride(), this->storage()+r.first()*this->stride());
}

} // namespace blas
