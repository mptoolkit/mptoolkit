// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// mps/density.cc
//
// Copyright (C) 2004-2016 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

//
// DensityMatrix<MatrixOperator>
//

template <typename FwdIterX>
MatrixOperator DensityMatrix<MatrixOperator>::ConstructTruncator(FwdIterX Start, FwdIterX End) const
{
   VectorBasis NewBasis(B.GetSymmetryList());

   // make a pass over the eigenvalue list and get the linear indices of the
   // states to keep for each quantum number
   int NumQ = B.size();
   std::vector<std::vector<int> > LinearMapping(NumQ);
   for (FwdIterX Iter = Start; Iter != End; ++Iter)
   {
      LinearMapping[Iter->Subspace].push_back(Iter->Index);
   }

   // Now we construct the truncated basis
   std::vector<int> NewSubspace(NumQ, -1); // maps the q to the new label
   for (int q = 0; q < NumQ; ++q)
   {
      if (LinearMapping[q].size() > 0)
      {
         NewSubspace[q] = NewBasis.size();
         NewBasis.push_back(B[q], LinearMapping[q].size());
      }
   }
   // Now we construct the actual transform
   MatrixOperator Transform(NewBasis, B.MappedBasis(), QuantumNumber(B.GetSymmetryList()));
   for (std::size_t s = 0; s < Transform.Basis2().size(); ++s)
   {
      int q;
      blas::Range LinRange;
      std::tie(q, LinRange) = B.Lookup(s);

      // sp is the subspace in NewBasis
      int sp = NewSubspace[q];
      if (sp == -1) continue;

      // need to initialize to zero here
      MatrixType Temp(LinearMapping[q].size(), LinRange.size(), 0.0);
      assign_slice(Temp, trans(RawDMList[q]), LinearMapping[q], LinRange);
      Transform.insert(sp, s, std::move(Temp));

#if defined(RANDOMIZE_VECTORS)
      for (unsigned i = 0; i < LinearMapping[q].size(); ++i)
      {
         Transform(sp, s)(i, LinearAlgebra::all) *= std::pow(-1, i);
      }
#endif

   }
   return Transform;
}

//
// DensityMatrix<SimpleOperator>
//


template <class FwdIter>
SimpleOperator DensityMatrix<SimpleOperator>::ConstructTruncator(FwdIter Start, FwdIter End) const
{
   BasisList NewBasis(B.GetSymmetryList());
   // make a pass over the eigenvalue list and get the linear indices of the
   // states to keep for each quantum number
   std::vector<std::pair<int, int> > KeptStates;
   for (FwdIter Iter = Start; Iter != End; ++Iter)
   {
      NewBasis.push_back(B[Iter->Subspace]);
      KeptStates.push_back(std::make_pair(Iter->Subspace, Iter->Index));
   }
   DEBUG_CHECK_EQUAL(NewBasis.size(), KeptStates.size());

   // Now we construct the actual transform
   SimpleOperator Transform(NewBasis, B.MappedBasis(), QuantumNumber(B.GetSymmetryList()));
   for (std::size_t s = 0; s < Transform.Basis2().size(); ++s)
   {
      int q, qi;
      std::tie(q, qi) = B.Lookup(s);

      for (std::size_t sp = 0; sp < NewBasis.size(); ++sp)
      {
         PANIC("untested - check transpose of RawDMList");
         int qp, qpi;
         std::tie(qp, qpi) = KeptStates[sp];
         if (qp == q)
            Transform.insert(sp, s, RawDMList[q](qi, qpi));
      }
   }
   return Transform;
}

template <class FwdIter>
SimpleOperator DensityMatrix<SimpleOperator>::ConstructUnnormalizedTruncator(FwdIter Start,
                                                                             FwdIter End) const
{
   BasisList NewBasis(B.GetSymmetryList());
   // make a pass over the eigenvalue list and get the linear indices of the
   // states to keep for each quantum number
   std::vector<std::pair<int, int> > KeptStates;
   std::vector<double> KeptEigenvalue;
   for (FwdIter Iter = Start; Iter != End; ++Iter)
   {
      NewBasis.push_back(B[Iter->Subspace]);
      KeptStates.push_back(std::make_pair(Iter->Subspace, Iter->Index));
      KeptEigenvalue.push_back(1.0 / std::sqrt(Iter->Eigenvalue));
   }
   DEBUG_CHECK_EQUAL(NewBasis.size(), KeptStates.size());

   // Now we construct the actual transform
   SimpleOperator Transform(NewBasis, B.MappedBasis(), QuantumNumber(B.GetSymmetryList()));
   for (std::size_t s = 0; s < Transform.Basis2().size(); ++s)
   {
      int q, qi;
      std::tie(q, qi) = B.Lookup(s);

      for (std::size_t sp = 0; sp < NewBasis.size(); ++sp)
      {
         PANIC("untested - check transpose of RawDMList");
         int qp, qpi;
         std::tie(qp, qpi) = KeptStates[sp];
         if (qp == q)
            Transform.insert(sp, s, get_wait(RawDMList[q](qi, qpi)) * KeptEigenvalue[sp]);
      }
   }
   return Transform;
}

//
// Singular value decomposition
//

template <typename FwdIter>
std::tuple<StateComponent, RealDiagonalOperator, StateComponent>
SingularDecomposition<StateComponent, StateComponent>::
ConstructMatrices(FwdIter first, FwdIter last)
{
   // make a pass over the eigenvalue list and get the linear indices of the
   // states to keep for each quantum number
   int NumQ = UsedQuantumNumbers.size();
   std::vector<std::vector<int> > LinearMapping(NumQ);
   for (FwdIter Iter = first; Iter != last; ++Iter)
   {
      LinearMapping[Iter->Subspace].push_back(Iter->Index);
   }

   return this->ConstructOrthoMatrices(LinearMapping);
}

template <typename FwdIter>
std::tuple<MatrixOperator, RealDiagonalOperator, MatrixOperator>
SingularDecomposition<MatrixOperator, MatrixOperator>::
ConstructMatrices(FwdIter first, FwdIter last)
{
   // make a pass over the eigenvalue list and get the linear indices of the
   // states to keep for each quantum number
   int NumQ = UsedQuantumNumbers.size();
   std::vector<std::vector<int> > LinearMapping(NumQ);
   for (FwdIter Iter = first; Iter != last; ++Iter)
   {
      LinearMapping[Iter->Subspace].push_back(Iter->Index);
   }

   return this->ConstructOrthoMatrices(LinearMapping);
}
