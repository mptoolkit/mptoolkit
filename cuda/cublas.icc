// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// cuda/cublas.h
//
// Copyright (C) 2017 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

namespace cublas
{

inline
handle& get_handle()
{
   static thread_local handle H = handle::create();
   return H;
}

// convert from rvalue ref to lvalue ref, to aid handling proxies
template <typename T>
constexpr T &lvalue(T &&r) noexcept { return r; }

#if 0
template <typename T>
void
matrix_norm_frob_sq(int M, int N,
		    cuda::const_gpu_ptr<T> A, int ldA,
		    cuda::gpu_ref<real_t<T>>& r)
{
   auto Acc = cuda::allocate_gpu_temporary<T>(N);
   cuda::gpu_ref<T> CResult;
   for (int i = 0; i < N; ++i)
   {
      vector_inner_prod(M, A+i, 1, A+i, 1, lvalue(Acc[i]));
   }
   vector_sum(N, Acc.cptr(), 1, CResult);
   r = get_wait(CResult).real();  // TODO: implement real() for a gpu_ref of complex
}
#endif

template <typename T>
void
matrix_inner_prod(char Atrans, char Btrans, int M, int N,
		      cuda::const_gpu_ptr<T> A, int ldA,
		      cuda::const_gpu_ptr<T> B, int ldB,
		      cuda::gpu_ref<T>& r)
{
   if (Atrans == 'N' && Btrans == 'N')
   {
      auto Acc = cuda::allocate_gpu_temporary<T>(N);

      for (int i = 0; i < N; ++i)
      {
	 vector_inner_prod(M, A+i, 1, B+i, 1, lvalue(Acc[i]));
      }
      vector_sum(N, Acc.cptr(), 1, r);
   }
   else
   {
      PANIC("not implemented");
   }
}

template <typename T>
void
matrix_add_inner_prod(char Atrans, char Btrans, int M, int N,
		  cuda::const_gpu_ptr<T> A, int ldA,
		  cuda::const_gpu_ptr<T> B, int ldB,
		  cuda::gpu_ref<T>& r)
{
   if (Atrans == 'N' && Btrans == 'N')
   {
      auto Acc = cuda::allocate_gpu_temporary<T>(N+1);
      Acc[0] = r;

      for (int i = 0; i < N; ++i)
      {
	 vector_inner_prod(M, A+i, 1, B+i, 1, lvalue(Acc[i]));
      }
      vector_sum(N, Acc.cptr(), 1, r);
   }
   else
   {
      PANIC("not implemented");
   }
}

} // namespace cublas

