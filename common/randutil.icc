// -*- C++ -*-
//----------------------------------------------------------------------------
// Matrix Product Toolkit http://physics.uq.edu.au/people/ianmcc/mptoolkit/
//
// common/randutil.cc
//
// Copyright (C) 2016 Ian McCulloch <ianmcc@physics.uq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Reseach publications making use of this software should include
// appropriate citations and acknowledgements as described in
// the file CITATIONS in the main source directory.
//----------------------------------------------------------------------------
// ENDHEADER

#include <cmath>

namespace randutil
{

// implementation details
namespace detail
{
template <typename T>
struct Dist
{
   static std::uniform_real_distribution<T> UniformDist;
   static std::normal_distribution<T> NormalDist;

   static T rand()
   {
      return UniformDist(u_rand);
   }

   static T randn()
   {
      return NormalDist(u_rand);
   }

   static T crand()
   {
      // this actually gives the interval [-1,1), which might be a problem?
      T x = UniformDist(u_rand);
      return 2*x-1;
   }
};

template <typename T>
std::uniform_real_distribution<T> Dist<T>::UniformDist(0,1);

template <typename T>
std::normal_distribution<T> Dist<T>::NormalDist;

template <typename T>
struct Dist<std::complex<T>>
{
   static std::complex<T> rand()
   {
      return {Dist<T>::rand(), Dist<T>::rand()};
   }

   static std::complex<T> randn()
   {
      return {Dist<T>::randn(), Dist<T>::randn()};
   }

   static std::complex<T> crand()
   {
      std::complex<T> x{Dist<T>::rand(), Dist<T>::rand()};
      while (std::norm(x) >= 1.0)
      {
	 x = std::complex<T>{Dist<T>::rand(), Dist<T>::rand()};
      }
   }
};

} // namespace detail


inline
int rand_int(int Min, int Max)
{
   return int(std::floor(randutil::rand() * (Max-Min+1))) + Min;
}

// returns a real number in the range [0,1)
template <typename T>
inline
T rand()
{
   return detail::Dist<T>::rand();
}

// returns a uniformly distributed real number
template <typename T>
inline
T randn()
{
   return detail::Dist<T>::randn();
}

// return uniform random number with magnitude < 1
template <typename T>
inline
T crand()
{
   return detail::Dist<T>::crand();
}


template <typename T>
void seed(std::initializer_list<T> s)
{
   seed(std::vector<unsigned>(s));
}

// class random_stream

inline
int random_stream::rand_int(int Min, int Max)
{
   return int(std::floor(this->rand() * (Max-Min+1))) + Min;
}

inline
double random_stream::rand()
{
   return UniformDist(u_rand);
}

inline
double random_stream::randn()
{
   return NormalDist(u_rand);
}

template <typename T>
void random_stream::seed(std::initializer_list<T> s)
{
   this->seed(std::vector<unsigned>(s));
}

} // namespace
