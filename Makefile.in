#
# Makefile.in for mptoolkit
#

SHELL = /bin/sh

SRCDIR = @srcdir@
TOP_SRCDIR = @top_srcdir@

LDFLAGS = @LDFLAGS@ $(LDFLAGS_EXTRA)
CXX = @CXX@

HAVE_OPENMP = @HAVE_OPENMP@
OPENMP_CXXFLAGS = @OPENMP_CXXFLAGS@

HAVE_MPI = @HAVE_MPI@
MPICXX = @MPICXX@
MPILIBS = @MPILIBS@

CXXFLAGS = -I. -I$(SRCDIR) @CPPFLAGS@ @CXXFLAGS@ -DHAVE_CONFIG_H $(CXXFLAGS_EXTRA)
# -DBLAS1_TRACE_DETAILED \
# -DBLAS3_TRACE_DETAILED \
# -DLAPACK_TRACE_DETAILED \
# -DLAPACK_TRACE_DETAILED \
# -DPHEAP_TRACE_DETAILED \
# -DDATABLOCK_TRACE_DETAILED -DPOOL_ALLOCATOR_VERBOSE -DPOOLALLOC_TRACE_DETAILED \

#either MAKEDEPEND line here will work (although the makedepend version hasn't been tested
# since the last modifications).  We could possibly add a configure check for -MM and
# makedepend, but -MM is fairly widely supported (probably more than makedepend anyway)
#MAKEDEPEND = makedepend -- $(CXXFLAGS) -- -f- -Y $< > $*.Td

MAKEDEPEND = $(CXX) -MM -MT $@ $(CXXFLAGS) -o $*.Td $<

# Makedepend with post-processing to add dummy rules for each dependency
MAKEDEPEND_INFO = $(MAKEDEPEND); \
	if [ -f $*.Td ] ; then cp $*.Td $*.d; \
          sed -e 's/\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
              -e '/^$$/ d' -e 's/$$/ :/' < $*.Td >> $*.d; \
          rm -f $*.Td ; else \
          echo "warning: unable to obtain dependency information for $<"; fi


prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR = @bindir@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

F77 = @F77@
FFLAGS = @FFLAGS@
FLIBS = @FLIBS@
LAPACK_LIBS = @LAPACK_LIBS@
BLAS_LIBS = @BLAS_LIBS@
BOOST_LIBS = @BOOST_PROGRAM_OPTIONS_LIB@
LIBS = @LIBS@ $(LIBS_EXTRA)

PACKAGE_NAME=@PACKAGE_NAME@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
PACKAGE_VERSION=@PACKAGE_VERSION@
PACKAGE_STRING=@PACKAGE_STRING@
PACKAGE_FULLNAME=$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)

LIBARPACK=@LIBARPACK@

PBS_LIB=-L/opt/pbs/lib -lpbs

DISTDIR=$(PACKAGE_FULLNAME)

TARDIR=$(PACKAGE_TARNAME)

LIB = $(BOOST_LIBS) $(LAPACK_LIBS) $(BLAS_LIBS) $(LIBS) $(FLIBS) $(LIBS_EXTRA)

GIT_TAG_VERSION := $(shell cd $(SRCDIR) && git describe --dirty --always --tags)

GIT_BRANCH := $(shell cd $(SRCDIR) && git rev-parse --symbolic-full-name --abbrev-ref HEAD)

GIT_VERSION = $(GIT_BRANCH):$(GIT_TAG_VERSION)

CXXFLAGS += -DGIT_VERSION="$(GIT_VERSION)"

SRCDIRS = common common/private quantumnumbers pstream pheap \
          tensor lattice mp-algorithms wavefunction \
          tutorial mp linearalgebra misc conf scripts utils interface expokit mpo \
          benchmark misc misc/oogl junk mpo mps parser models models/contrib

TESTDIRS = tensor/test siteoperator/test linearalgebra/test matrixproduct/test pheap/test \
           common/test quantumnumbers/test mp-algorithms/test mpo/test

DIRS = $(SRCDIRS) $(TESTDIRS)

SRCSUBDIRS = $(patsubst %,$(SRCDIR)/%, $(DIRS))

VPATH = $(SRCDIR) $(SRCSUBDIRS)

GSRCDIRS = examples/pheap
GSRCSUBDIRS = $(patsubst %,$(SRCDIR)/%, $(GSRCDIRS))

# GPATH = $(GSRCSUBDIRS)

quantumnumbersobj = quantumnumber.o symmetrybase.o symmetrylist.o \
		    coupling.o u1.o su2.o null-quantumnumber.o z2.o

tensorobj = tensorproduct.o tensorsum.o basis.o regularize.o tensor_eigen.o

latticeobj = siteoperator.o latticesite.o unitcell.o unitcell-parser.o unitcell_mpo.o \
             infinitelattice.o siteoperator-parser.o infinite-parser.o \
             function.o

dmrgobj = $(tensorobj) density.o

pheapobj = bufferalloc.o pagefile.o pheapstream.o pheapfsblock.o \
           pheapallocator.o pheap.o pheapfsv4.o pagestream.o rawpagestream.o inittemp.o

pstreamobj = pstream.o pfilestream.o

linearalgebraobj = eigen.o

mpoobj = operator_component.o generic_mpo.o finite_mpo.o triangular_mpo.o product_mpo.o infinite_mpo.o \
         f-optim.o e-optim.o

mpsobj = state_component.o density.o

wavefunctionobj = linearwavefunction.o canonicalwavefunction.o infinitewavefunctionleft.o \
                  infinitewavefunctionright.o ibc.o \
                  mpwavefunction.o operator_actions.o \
                  attributes.o history.o

parserobj = color-output.o parser.o

mpobj = $(mpoobj) $(mpsobj) $(latticeobj) $(wavefunctionobj)

commonobj = niftycounter.o poolallocator.o hash.o proccontrol.o \
	    halfint.o stackallocator.o conflist.o terminal.o

debugobj = backtrace.o debughandler.o

simplecommonobj = poolallocator.o stackallocator.o backtrace.o debughandler.o catchsegv.o

expokitobj = zgpadm.o exponential.o tensor_exponential.o

objects = $(quantumnumbersobj) \
          $(dmrgobj)           \
          $(pheapobj)          \
          $(pstreamobj)        \
          $(linearalgebraobj)  \
          $(commonobj)

linearalgebra_tests = testmapvector testhashvector teststdvector \
                      testvector testcomplexvector \
                      testmatrix testlinearsolvespd testvectorcomplex \
                      testlinearsolvehpd testfixedvector \
                      testdirectproduct testcoefficientmultiply \
                      testmultiply-nn testmultiply-tn \
                      testscalarmatrix testsparsematrix testdiagonalizesymmetric \
                      testdiagonalizehermitian testconj testequal testnorminf \
                      testrangeprod testdirectsum testindex testtrig testmatrixserialize \
                      testproject12 testfill testmultiply-corner testvectorswap \
                      testvectorstring testvectorserialize testinverthpd testsum \
                      testtrace testmatrixbinarytransform testflatten testmatrixrange \
                      testmatrixminmax testcholesky testinverttri testmultiplyself \
                      testexponential testrational testnormfrob_matrix testherm testqr testhaar

linearalgebra_extra_tests = testcprod testcomplexvector \
                            testmatrixsection testslicereal testsliceblas \
                            testhermproduct testmatrixparallel testrangerange \
                            testmatrixrangeslice testvectorrange testmatrixio \
                            testinnerprod testparallelprod testmatrixvectorviewmem testdiagonalmatrix \
	                    testsvd

mp-algorithms_tests = test-arnoldi test-gmres

tensor_tests = testbasis testtensor testadjoint testscalarprod testtensorsum \
               testtensorprod testtripleprod \
               testvectorbasis testregularize testprodherm testdeltaprod testred

lattice_tests = testsitebasis testsiteoperator testcomplexsiteoperator

matrixproduct_tests = testmpstate testdensity testperiodicwavefunction testscalardirectprod \
                      testtriangularaddition testsvd-decompose testpackunpack

mpo_tests = test_operator_decompose

pheap_tests = testpheap-write testpheap-read testpheap-read-xdr

common_tests = testrunlengthcompressed

quantumnumber_tests = testcoupling

alltests = $(linearalgebra_tests) $(tensor_tests) $(lattice_tests) \
           $(matrixproduct_tests) $(common_tests) $(quantumnumber_tests)

allobj = $(quantumnumbersobj) \
	 $(dmrgobj)           \
	 $(pheapobj)          \
	 $(pstreamobj)        \
	 $(linearalgebraobj)  \
	 $(commonobj)         \
         $(parserobj)

# contributed models.  Add new models here
contrib-models = spin-tri-yc-su2 spin-tri-xc-su2 spin-tri-yc-su2-NonEff \
                 spin-tri-2SiteUnitCell-su2 spin-tri-1SiteUnitCell-su2 spin-tri-yc-u1 spin-tri-yc \
                 tki-u1su2

# default / examplar models
default-models = spinchain-su2 spinchain-spin2-su2 \
                 hubbard-u1su2 hubbard-tri-u1su2 bosehubbard-flux-2leg-u1 \
                 bosehubbard-flux-3leg-u1 spinchain-u1 spincylinder-su2 \
                 spinchain bosehubbard-ladder-u1 bosehubbard-2component-u1z2 \
                 hubbard-so4 bosehubbard-u1 bosehubbard hubbard-u1u1 \
                 hubbard-tri-u1u1 hubbard-tri hubbard-su2 spinladder-su2 spinchain-z2

tools = mp-idmrg-s3e mp-ioverlap \
        mp-info mp-history mp-reflect mp-conj \
        mp-imoments mp-iexpectation mp-wigner-eckart mp-reorder-symmetry \
        mp-ispectrum mp-lattice-info mp-show-operator mp-aux-matrix mp-aux-algebra mp-iapply mp-attr \
        mp-idivide mp-ies mp-irepeat \
        mp-irotate mp-icorrelation mp-fluctuation

experimental-tools = mp-iprint mp-iproject mp-idmrg mp-iupdate mp-ibc-create mp-aux-project mp-ibc-dmrg


benchmarks = benchtripleprod

misc-progs = untridiagonalize tridiag-kspace mp-min-resid seqgen2


tools : $(tools)

default-models : $(default-models)

contrib-models : $(contrib-models)


models : default-models

all-models = $(default-models) $(contrib-models)

all-models : $(all-models)

all : tools models

all-contrib : tools all-models

default : tools



dist_files = config.h.in configure configure.ac aclocal.m4 Makefile.in  generate-testreport.sh \
             depend.sh install-sh stamp-h.in README TODO mkinstalldirs \
             $(SRCDIRS)

cxxsrcglob = *.cpp $(patsubst %,%/*.cpp, $(subst :, ,$(VPATH))) \
	     $(patsubst %,%/*.cpp, $(subst :, ,$(GPATH)))

cxx_source := $(notdir $(wildcard $(cxxsrcglob)))
cxx_depend = $(cxx_source:%.cpp=%.d)

nodep-targets = clean mrproper dep uninstall dist distclean maintainer-clean dist-dir tar-dir tar

dep : $(cxx_depend)

.PHONY: clean mrproper dep test all install uninstall dist-clean \
        maintaner-clean install-dirs dist-dir tar-dir tar install-models install-tools \
        tools models default install_tools install_models models-install models_install \
        tools-install tools_install

# turn off some implicit rules that we don't want
%.o : %.cpp
%.o : %.cc
%.o : %.c
%.o : %.f

# we don't need this rule (it doesnt work with repsect to dependency generation anyway)
#% : %.o
#	$(CXX) $(CXXFLAGS) $(LDFLAGS) $^ $(LIB) $(LIBS_$@) -o $@

% : %.cpp
	@$(MAKEDEPEND_INFO)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(filter %.o %.cpp, $^) $(LIB) $(LIBS_$@) -o $@

%.o : %.cpp %.d
	@$(MAKEDEPEND_INFO)
	$(CXX) $(CXXFLAGS) -c $< -o $@

%.o : %.f
	$(F77) $(FFLAGS) -c $< -o $@

%.d : 
	\


.SECONDARY: $(cxx_depend)

clean :
	rm -f *.o
	rm -f *.d
	rm -f $(alltests)
	rm -f $(tools)
	rm -f $(all-models)

mrproper :
	rm -f *.o
	rm -f *.d
	rm -f $(alltests)
	rm -f $(tools)
	rm -f $(all-models)
	rm -f -- $(patsubst %,%/*~, $(subst :, ,$(VPATH)))

depclean :
	rm -f *.d

test : $(alltests)
	$(SRCDIR)/generate-testreport.sh $(alltests:%=./%)

test_tensor : $(tensor_tests)
	$(SRCDIR)/generate-testreport.sh $(tensor_tests:%=./%)

testla : $(linearalgebra_tests)
	$(SRCDIR)/generate-testreport.sh $(linearalgebra_tests:%=./%)

$(tools) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
           $(dmrgobj) $(mpobj) $(expokitobj) $(linearalgebraobj) $(parserobj)

$(experimental-tools) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
                        $(dmrgobj) $(mpobj) $(expokitobj) $(linearalgebraobj)

$(all-models) :  $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
              $(dmrgobj) $(mpobj) $(expokitobj) $(linearalgebraobj)

$(mp-misc) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
               $(dmrgobj) $(mpobj)

#
# dependencies for tensor tests
#

$(tensor_tests) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) basis.o

spin1test : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) basis.o

testbasis : basis.o
testvectorbasis : basis.o tensorsum.o tensorproduct.o
testtensor : basis.o
testtensorsum : basis.o tensorsum.o
testtensorprod : basis.o tensorproduct.o
testtripleprod : basis.o
testregularize : basis.o regularize.o
testdeltaprod : basis.o tensorproduct.o

#
# dependencies for matrixproduct tests
#

$(matrixproduct_tests) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj)

testtriangularaddition : mpstate.o siteoperator.o mpopcomponent.o eigen.o

testmpstate : mpstate.o
testmpstateu1 : mpstate.o
testmpstatesu2 : mpstate.o
testdensity : density.o eigen.o
testlattice : mpstate.o mpopcomponent.o siteoperator.o
testmpopcompressed : mpopcompressed.o siteoperator.o eigen.o mpopcomponent.o
testmpoperator : mpopcompressed.o siteoperator.o eigen.o mpopcomponent.o lattice.o
testmodel : mpopcompressed.o siteoperator.o eigen.o mpopcomponent.o lattice.o mpoperatorlist.o
testcg : eigen.o
testsvd-decompose : density.o eigen.o mpstate.o
testpackunpack : packunpack.o mpstate.o eigen.o

#
# dependencies for mpo tests
#

$(mpo_tests) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj) $(latticeobj)

test_operator_decompose : $(expokitobj) $(mpoobj) eigen.o

#
# dependencies for lattice tests
#

$(lattice_tests) : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj) $(latticeobj)

#
# dependencies for linearalgebra tests
#

$(linearalgebra_tests) : $(commonobj) $(linearalgebraobj)

$(linearalgebra_extra_tests) : $(commonobj) eigen.o

testsiteoperator : eigen.o
testsitebasis : eigen.o
testcomplexsiteoperator : eigen.o
testmpstate : eigen.o
testexponential : eigen.o zgpadm.o exponential.o

#
# dependencies for mp-algorithms tests
#

$(mp-algorithms_tests) : $(commonobj) $(linearalgebraobj) eigen.o

#$(mp-algorithms_tests) : $(commonobj) $(linearalgebraobj) $(expokitobj) eigen.o

#
# dependencies for pheap tests
#

$(pheap_tests) : $(commonobj) $(pstreamobj) $(pheapobj)

testmatrixserialize : $(pstreamobj)
testvectorserialize : $(pstreamobj)

#
# dependencies for quantumnumber tests
#

$(quantumnumber_tests) : $(commonobj)

testcoupling : coupling.o


testperiodicwavefunction : periodicwavefunction.o mpstate.o eigen.o

testsite : testsite.o $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj)

testsitebasis2 : testsitebasis2.o $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj) $(siteobj)

perf-sparse : poolallocator.o

cgcalculator : coupling.o halfint.o

spin1-unit : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) $(tensorobj) siteoperator.o eigen.o


# benchmarks

bench-tripleprod : $(commonobj) $(linearalgebraobj) $(tensorobj) $(pstreamobj) $(pheapobj) $(quantumnumbersobj)

bench-rotate :  $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
              $(dmrgobj) $(mpobj)

# mp-tools

mp-cg : cg.o
mp-gmres : cg.o
mp-cg-sym : cg.o
mp-bicg : cg.o
mp-simplecg-sym : simplecg.o
mp-simplecg : simplecg.o
mp-simplegmres : simplecg.o
mp-ddmrg : ddmrg.o
mp-dmrg-init : dmrg.o stateslist.o
mp-dmrg-resume : dmrg.o stateslist.o
mp-gmres-init : simplecg.o solver-gmres.o stateslist.o
mp-gmres-resume : simplecg.o solver-gmres.o stateslist.o
mp-trotter : mpexponential.o $(expokitobj)
mp-dmrg : dmrg.o
mp-evolve-krylov : progressivekrylov.o krylovloop.o $(expokitobj)
mp-evolve-magnus : progressivekrylov.o krylovloop.o $(expokitobj)
mp-dmrg-2site : dmrg.o
mp-apply-opt : prodoptimizer.o
mp-apply-multiple : prodoptimizer.o
mp-evolve-mixed : aggregator.o $(expokitobj)
mp-dmrg-infinite-klm : dmrg.o
mp-evolve-krylov-simple : simplekrylov.o $(expokitobj)
mp-wigner-eckart : wigner_eckart.o

mp-cv2 : functional-solver.o

mp-dmrg-init mp-random : random_wavefunc.o

mp-misc = make-vb-state make-vb-su2

mp-simple-marshall-qmc : random_wavefunc.o

# infinite tools

mp-idmrg5 : $(mpoobj) infinitewavefunctionleft.o random_wavefunc.o packunpack.o triangular_mpo_solver.o momentum_operations.o infinitelattice.o
mp-idmrg : $(mpoobj) random_wavefunc.o packunpack.o triangular_mpo_solver.o momentum_operations.o infinitelattice.o stateslist.o
mp-idmrg-s3e : $(mpoobj) random_wavefunc.o packunpack.o triangular_mpo_solver.o momentum_operations.o infinitelattice.o stateslist.o ef-optim.o eigensolver.o
mp-ibc-dmrg : $(mpoobj) random_wavefunc.o packunpack.o triangular_mpo_solver.o momentum_operations.o infinitelattice.o stateslist.o ef-optim.o eigensolver.o
mp-idmrg5-spin2 : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o packunpack.o
mp-irename-symmetry : triangular_operator.o mpoperator.o infinitewavefunctionleft.o
mp-iparity : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o packunpack.o
mp-bdmrg : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o packunpack.o
mp-iexpectation : $(mpoobj) infinitewavefunctionleft.o random_wavefunc.o
mp-imoments : $(mpoobj) triangular_mpo_solver.o momentum_operations.o infinitewavefunctionleft.o random_wavefunc.o triangular_mpo_solver.o
mp-fluctuation : $(mpoobj) triangular_mpo_solver.o momentum_operations.o infinitewavefunctionleft.o random_wavefunc.o triangular_mpo_solver.o packunpack.o
mp-iexpectation-sz : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o
mp-iexpectation-sz2 : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o
mp-iexcitation : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o
mp-iexcitation2 : triangular_operator.o mpoperator.o infinitewavefunctionleft.o random_wavefunc.o
mp-igradient : triangular_operator.o infinitewavefunctionleft.o random_wavefunc.o
mp-ispectral-expansion : triangular_operator.o infinitewavefunctionleft.o random_wavefunc.o
mp-ioverlap : infinitewavefunctionleft.o
mp-aux-algebra : infinitewavefunctionleft.o packunpack.o matrix-parser.o
mp-aux-matrix : infinitewavefunctionleft.o packunpack.o
mp-ies : infinitewavefunctionleft.o packunpack.o
mp-aux-project : infinitewavefunctionleft.o packunpack.o


mp-ireorder-symmetry : infinitewavefunctionleft.o 


mp-iproject : infinitewavefunctionleft.o
mp-icorrelation : infinitewavefunctionleft.o siteoperator-parser.o
pp-iortho : triangular_operator.o infinitewavefunctionleft.o
mp-iinfo : infinitewavefunctionleft.o
mp-iprint : infinitewavefunctionleft.o
mp-iorthogonalize : triangular_operator.o infinitewavefunctionleft.o
mp-pwfrg : triangular_operator.o match_basis.o
mp-itebd : mpexponential.o $(expokitobj) infinitewavefunctionleft.o
mp-itebd2 : $(expokitobj) infinitewavefunctionleft.o random_wavefunc.o
mp-evolve-bonds : local-evolution.o $(expokitobj)
mp-ispectrum : infinitewavefunctionleft.o packunpack.o arpack_wrapper.o siteoperator-parser.o
mp-ispectrum2 : infinitewavefunctionleft.o packunpack.o arpack_wrapper.o unitcell-parser.o unitcell.o latticesite.o $(expokitobj)
mp-ieigen : triangular_operator.o infinitewavefunctionleft.o
mp-idump : infinitewavefunctionleft.o
mp-imake-transverse-lattice : triangular_operator.o infinitewavefunctionleft.o random_wavefunc.o mpoperatorlist.o lattice.o linear_operator.o $(expokitobj)
mp-imake-transverse-lattice-folded : triangular_operator.o infinitewavefunctionleft.o random_wavefunc.o mpoperatorlist.o lattice.o linear_operator.o $(expokitobj)
mp-iexpectation-tri : infinitewavefunctionleft.o triangular_operator.o mpoperator.o packunpack.o
mp-iwigner-eckart : infinitewavefunctionleft.o wigner_eckart.o


LIBS_mp-ispectrum = $(LIBARPACK)

LIBS_mp-ispectrum2 = $(LIBARPACK)

LIBS_mp-aux-algebra = $(LIBARPACK)

LIBS_mp-aux-matrix = $(LIBARPACK)

LIBS_mp-fluctuation = $(LIBARPACK)

LIBS_mp-ies = $(LIBARPACK)

LIBS_mp-aux-project = $(LIBARPACK)


#LIBS_mp-idmrg5 = $(LIBARPACK)

mp-idmrgx : dmrg.o match_basis.o

mp-min-resid : $(commonobj) $(linearalgebraobj)

# $(mp-tools) : $(expokitobj)
# $(mp-tools-experimental) : $(expokitobj)

#mp-overlap-bigmem : threads.o

testdmrg :  $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
            $(dmrgobj) eigen.o mpstate.o mpopcomponent.o mpoperatorlist.o

testlanczos : $(commonobj) eigen.o

testdlamch :

kondo-exactdiag : $(expokitobj)


# misc progs

untridiagonalize : eigen.o stackallocator.o poolallocator.o
tridiag-kspace : eigen.o stackallocator.o poolallocator.o

readsurf : oogl.o poolallocator.o

get-k : $(commonobj) $(linearalgebraobj)

seqgen : eigen.o stackallocator.o poolallocator.o
seqgen2 : $(commonobj) $(pstreamobj) $(pheapobj) $(quantumnumbersobj) $(linearalgebraobj) $(mpobj) $(tensorobj)
seqgen-dm : eigen.o stackallocator.o poolallocator.o

# old stuff for the pheap examples
examples/pheap/example1 : $(commonobj)
examples/pheap/example2 : $(commonobj) $(pstreamobj) $(pheapobj)
examples/pheap/example3 : $(commonobj) $(pstreamobj) $(pheapobj)
examples/pheap/example4-init : $(commonobj) $(pstreamobj) $(pheapobj)
examples/pheap/example4-resume : $(commonobj) $(pstreamobj) $(pheapobj)

examples/linearalgebra/matrix-example1 : $(commonobj) $(linearalgebraobj)

testmp : mpstate.o mpopcomponent.o $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
            $(dmrgobj) eigen.o

testassoc : coupling.o halfint.o

testvector : $(commonobj)

testslice : $(commonobj)

examples/la-tng/vectorexample : $(commonobj)

testvectortransform : $(commonobj)

testmatelem : $(commonobj)  $(pstreamobj) $(pheapobj) $(quantumnumbersobj) $(linearalgebraobj) $(mpobj) $(tensorobj)

spin2 : eigen.o

spin1 : eigen.o


# utils

diag-list : eigen.o stackallocator.o poolallocator.o

# examples

examples/example1 : $(commonobj)

# misc dependencies

qshifttop.o : qshifttop.cpp
	$(CXX) $(CXXFLAGS) -I/opt/pbs/include -c $< -o $@

qshifttop : qshifttop.o
	$(CXX) $(CXXFLAGS) $^ $(LIB) $(PBS_LIB) -o $@

averagecorr : averagecorr.o
	$(CXX) $(CXXFLAGS) $^ -lm -o $@

make-pi : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
              $(dmrgobj) mpopcomponent.o mpoperatorlist.o siteoperator.o eigen.o mpstate.o

make-pi-u1 : $(commonobj) $(quantumnumbersobj) $(pstreamobj) $(pheapobj) \
              $(dmrgobj) mpopcomponent.o mpoperatorlist.o siteoperator.o eigen.o mpstate.o

install-dirs :
	test -d $(BINDIR) || $(SRCDIR)/mkinstalldirs $(BINDIR)

install-tools : $(tools) install-dirs
	for i in $(tools) ; do \
	$(INSTALL_PROGRAM) $$i $(BINDIR) ; done

install-models : $(default-models) install-dirs
	for i in $(default-models) ; do \
	$(INSTALL_PROGRAM) $$i $(BINDIR) ; done

install-all-models : $(all-models) install-dirs
	for i in $(all-models) ; do \
	$(INSTALL_PROGRAM) $$i $(BINDIR) ; done


install_models : install-models

models-install : install-models

models_install : install-models

install_tools : install-tools

tools-install : install-tools

tools_install : install-tools

install : install-tools


install-mv : $(tools) install-dirs
	for i in $(tools) ; do \
	mv $$i $(BINDIR) ; done

install-mv-models : $(default-models) install-dirs
	for i in $(default-models) ; do \
	mv $$i $(BINDIR) ; done


install-existing : install-dirs
	for i in $(all-models) $(tools) $(tools-experimental) ; do \
	if [ -f $$i ] ; then $(INSTALL_PROGRAM) $$i $(BINDIR) ; fi ; done

uninstall :
	for i in $(tools) $(all-models) $(tools-experimental) ; do \
	rm -f $(BINDIR)/$$i ; done

dist-dir :
	test -d $(DISTDIR) || mkdir $(DISTDIR)

dist : dist-dir
	for i in $(dist_files) ; do \
	cp -a $(SRCDIR)/$$i $(DISTDIR)/ ; done
	tar cfz $(DISTDIR).tar.gz $(DISTDIR)

tar-dir :
	test -d $(TARDIR) || mkdir $(TARDIR)

tar : tar-dir
	for i in $(dist_files) ; do \
	cp -a $(SRCDIR)/$$i $(TARDIR)/ ; done
	tar cfz $(TARDIR).tar.gz $(TARDIR)

distclean : clean
	rm -f config.h stamp-h config.status config.cache config.log

maintainer-clean : distclean
	rm -Rf $(DISTDIR)
	rm -f $(DISTDIR).tar.gz

# automatic re-running of configure if the configure.in file has changed
# if we have aclocal.m4 then we would want it as a dependency along with
# configure.in

to-sha = $(patsubst %,%.sha,$1)
from-sha = $(patsubst %.sha,%,$1)

%.sha : FORCE
	$(if $(filter-out $(shell cat $@ 2>/dev/null), $(shell cd $(shell dirname $*) && sha1sum $(shell basename $*))),(cd $(shell dirname $*) && sha1sum $(shell basename $*)) > $@)

#        $(if $(filter-out $(shell cat $@ 2>/dev/null), $(shell cd $(shell dirname $*) && sha1sum $(shell basename $*))), cd $(shell dirname $*) && sha1sum $(shell basename $*) > $@)

#        cd $(shell dirname $*) && sha1sum $(shell basename $*) > $@)

FORCE:

# set the correct timestamps
#DUMMY_RESULT:=$(shell touch -d '$(shell cat ${SRCDIR}/configure.timestamp)' '${SRCDIR}/configure.ac' && \
#                      touch -d '$(shell cat ${SRCDIR}/aclocal.m4.timestamp)' '${SRCDIR}/aclocal.m4' && \
#                      touch -d '$(shell cat ${SRCDIR}/stamp-h.in)' '${SRCDIR}/stamp-h.in')

$(SRCDIR)/configure:${SRCDIR}/configure.ac.sha ${SRCDIR}/aclocal.m4.sha
	cd '$(SRCDIR)' && autoconf

${SRCDIR}/aclocal.m4 : ${SRCDIR}/m4/*.m4 ${SRCDIR}/aclocal.m4.sha
	cd '$(SRCDIR)' && ./regen-aclocal.sh

# autoheader might not change config.h.in, so touch a stamp file.
#
# stamp-h is touched when config.status constructs config.h
# stamp-h.in is touched when autoheader constructs config.h.in
# Note that git doesn't track the timestamps of files, so we need to
# look at the contents of stamp-h.in rather than rely on its modification time.

${SRCDIR}/stamp-h.in : ${SRCDIR}/configure.ac.sha ${SRCDIR}/aclocal.m4.sha
	cd '${SRCDIR}' && autoheader
	date > '${SRCDIR}/stamp-h.in'

config.h : stamp-h

stamp-h : config.status stamp-h.in
	./config.status

#stamp-h : config.status stamp-h.in

ifeq (,$(filter $(nodep-targets),$(MAKECMDGOALS)))
Makefile : Makefile.in config.status
	./config.status
endif

config.status : configure
	./config.status --recheck

# this needs to go at the bottom
ifeq (,$(filter $(nodep-targets),$(MAKECMDGOALS)))
-include $(cxx_depend)
endif

